羊毛党 反作弊
用户行为：注册/登录频率、设备指纹（UA、IMEI）、IP/地址变化、操作时长/路径。
交易/活动：参与次数、金额分布、邀请码使用、关联账号数。
时序/异常：突发高频行为、夜间操作、地理异常。

主力：XGBoost/LightGBM（处理不平衡数据好，特征重要性分析）。
进阶：孤立森林（异常检测）或Autoencoder（无监督）。
------------------
随机梯度下降（SGD）、 ⾃适应矩估计（Adam）、 动量优化（Momentum）
SGD + Momentum 调参技巧：学习率 lr0.01 ~ 0.1，从 0.01 开始太大→爆炸，太小→卡住动量 momentum0.9 是黄金值0.9 稳，0.99 冲得猛（大数据用）学习率衰减每 10 epoch 除以 10后期精细调整Nesterov打开！nesterov=True提前看一眼坡，比普通动量快一点
-------------------
风控系统架构
“风控系统一般是 分层 + 实时/离线结合 的架构：
数据层：实时流（Kafka）+ 离线库（Hive/ClickHouse），采集用户行为、设备、交易日志。
特征层：实时特征服务（Flink/Redis）+ 离线特征平台（Spark），输出用户画像、统计特征。
规则引擎：Drools/自研规则平台，处理明确作弊（如 IP 频繁换、邀请链异常）。
模型层：XGBoost/LightGBM（离线）+ ONNX/PMML（实时推理），打分高风险用户。
决策层：规则+模型融合（加权/级联），输出拦截/审核/放行。
执行与监控：风控动作下发（限流/封号），Dashboard + 告警。

整体是 规则兜底 + 模型提升，支持 A/B 测试和策略迭代。”
--------------------------
反爬虫 (Anti-Scraping)
“反爬虫分 检测 和 对抗 两类：
1. 检测类（判断是不是爬虫）
请求频率：短时高频 IP/账号 → 限流
User-Agent：缺失/异常/爬虫特征 → 拒绝
Headers 完整性：缺 Cookie、Referer、Accept → 拦截
行为路径：无 JS 渲染、直访 API、无鼠标/滚动 → 标记
设备指纹：Canvas、WebGL、字体一致性 → 识别自动化
验证码：滑块、点选、拼图（触发阈值后出）
2. 对抗类（让爬虫拿不到/拿错数据）
动态渲染：前端 JS 生成内容（React/Vue）
数据混淆：字段加密、class 名随机、雪花 ID
接口签名：token + 时间戳 + 签名校验
IP 代理封禁：云 IP 库（MaxMind）、代理池识别
蜜罐链接：隐藏陷阱 URL，爬到即封

“UA + 指纹看身份，频率 + 行为判爬虫，验证码 + 动态涨成本，WAF + 蜜罐直接封。”
-----------------------
攻防对抗 (Adversarial Attack)
“风控是 黑灰产 vs 平台 的持续对抗，攻防核心在 特征、规则、模型 三层：
1. 攻击方（羊毛党/黑产）
特征扰动：换 IP/设备、模拟真人点击、打散频率
规则绕过：拆单、小额多笔、养号、邀请链伪装
模型对抗：投毒（刷正常数据）、探针（试错找阈值）、生成对抗样本
2. 防御方（平台）
特征增强：设备指纹（Canvas/传感器）、行为序列（鼠标轨迹）、关系图（团伙）
规则动态化：热加载 + A/B 测试 + 决策树自动生成
模型对抗防御：
对抗训练（加扰动样本）
多模型融合（XGBoost + NN + 规则）
在线学习（Flink 实时更新）
解释性监控（SHAP 看特征漂移）

‘攻在扰动特征，防在多维+动态+融合’——风控是军备竞赛，赢在迭代速度。”
-------------------------------
了解常见的作弊手段， 如卡商、 猫池、 群控系统
卡商：卖手机卡/虚拟号，1毛-几块一张，供注册。
猫池：插几百张卡，自动收验证码，工业级接码机。
群控：一键控几百台手机/模拟器，改设备ID、跑脚本模拟真人薅。

流程：买卡 → 猫池接码 → 群控注册/领券 → 小额拆单提现。
核心是 低成本批量 + 伪装真人行为。
防法：设备指纹 + 行为序列 + 团伙图 + 动态规则。”
-----------------------------------
设备指纹 (Device Fingerprinting)
硬件：IMEI、MAC、CPU ID、屏幕分辨率、传感器
软件：OS 版本、UA、字体列表、时区、插件
浏览器：Canvas、WebGL、AudioContext 渲染指纹
行为：鼠标轨迹、触摸压力、输入习惯

多维特征哈希成唯一 ID
大厂用 Ark/同盾/ThreatMetrix
------------------------------------
重构误差 (Reconstruction Error)
用Autoencoder (自编码器)沙漏形状的模型 把输入数据压缩，再还原回来
正常数据（如真实用户行为）：能被很好地“压缩-还原”，输出 ≈ 输入
异常数据（如羊毛党）：模型没见过，还原会出错 → 输出 ≠ 输入
设一个阈值（如 99% 分位数），误差 > 阈值 → 标记为异常
--------------------------------------
序列编码 (Sequence Embedding)
序列编码就是把用户行为这串‘操作故事’压缩成一个向量，羊毛党的故事和正常人长得不一样，一眼就能抓！
主流序列编码模型（面试必背）
模型原理风控场景Word2Vec (Skip-gram/CBOW)预测前后事件短序列（如点击类型）
LSTM/GRU循环记忆时序中长序列（30步内）
Transformer (BERT)自注意力并行长序列 + 上下文
--------------------------------------
Transformer
QK 算关系，softmax 给权重，乘 V 取内容
用户Q = “注册”QK^T 最高的是？输出含义
正常用户注册 浏览 / 登录 关注正常路径
羊毛党注册 领券 / 退出 异常关注！ → 风控报警
--------------------------------------
GRU (门控循环单元)
类似于LSTM，2门控 （更新门、重置门）+ 插值记忆，LSTM 的轻量继任者，风控序列编码首选
-------------------------------------
GNN (图神经网络)
GNN 是风控的‘关系户探测器’——传统模型看行为，GNN 看人脉，羊毛党再隐蔽，朋友圈出卖他
--------------------------------------
LPA (标签传播算法)
建图 → 2. LPA 聚类 → 3. 社区打分 → 4. 人工/规则验证 → 5. 封号/监控
图上的‘病毒传播’聚类法
--------------------------------------
Louvain 算法
Louvain 算法是一种高效的社区检测方法，用于在大规模图中自动发现“紧密子群”（如羊毛党团伙），核心是 贪心优化模块度（Modularity）——衡量社区内边密度 vs 随机期望的差异。
它像“分家产”：先小圈子聚拢，再大圈子合并，直到模块度最大化
Q = (1/(2m)) * Σ [Aij - (ki*kj)/(2m)] * δ(ci,cj)
-------------------------------------
社区发现 (Community Detection)
朋友圈太密 = 团伙，社区发现自动框出来！
建关系图（邀请+同IP+同设备）→ 跑 Louvain → 每个社区打 团伙分 → 分 > 阈值 → 批量封号”
--------------------------------------
高斯混合模型 (GMM)
KMeans 是硬分（你归我），GMM 是软分（你有70%像我）！每个点对所有类别都有一个“概率”
找聚类K可以用极大似然值或者簇内平方和
-----------------------------------
ROC曲线在欺诈检测模型中的意义和应⽤
TPR（召回） = TP / (TP + FN) → “漏了多少羊毛党？”
FPR = FP / (FP + TN) → “误伤了多少好人？”